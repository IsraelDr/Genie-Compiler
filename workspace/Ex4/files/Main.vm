function Main.main 3
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 10
call Array.new 1
pop local 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 5
call Array.new 1
pop local 1
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 1
call Array.new 1
pop local 2
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 2
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 4
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 8
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 5
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 4
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
push constant 3
add
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
// inserting the array offset to the stack 
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
// inserting the array offset to the stack 
push constant 5
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array offset to the stack 
push constant 7
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
sub
push constant 2
call Main.double 1
sub
push constant 1
add
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
call Math.multiply 2
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 0
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 0
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 0
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
pop local 2
// do statement
push constant 44
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 53
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
// ignoring the output of the function
pop temp 0
// do statement
// inserting the array offset to the stack 
push constant 2
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
call Output.printInt 1
// ignoring the output of the function
pop temp 0
// do statement
call Output.println 0
// ignoring the output of the function
pop temp 0
// do statement
push constant 45
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 52
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
// ignoring the output of the function
pop temp 0
// do statement
// inserting the array offset to the stack 
push constant 5
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
call Output.printInt 1
// ignoring the output of the function
pop temp 0
// do statement
call Output.println 0
// ignoring the output of the function
pop temp 0
// do statement
push constant 44
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 51
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
// ignoring the output of the function
pop temp 0
// do statement
push local 2
call Output.printInt 1
// ignoring the output of the function
pop temp 0
// do statement
call Output.println 0
// ignoring the output of the function
pop temp 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 0
pop local 2
//condition
push local 2
push constant 0
eq
if-goto Main_true_label0
goto Main_false_label0
label Main_true_label0
// true statments
// do statement
push local 0
push constant 10
call Main.fill 2
// ignoring the output of the function
pop temp 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
pop local 2
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 33
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 7
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
pop local 2
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 77
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 3
// inserting the array base pointer to the stack 
push local 0
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
pop local 1
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
add
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
label Main_false_label0
// do statement
push constant 45
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 52
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 55
call String.appendChar 2
push constant 55
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
// ignoring the output of the function
pop temp 0
// do statement
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 2
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
call Output.printInt 1
// ignoring the output of the function
pop temp 0
// do statement
call Output.println 0
// ignoring the output of the function
pop temp 0
// do statement
push constant 46
call String.new 1
push constant 84
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 53
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 82
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 48
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 65
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
// ignoring the output of the function
pop temp 0
// do statement
// inserting the array offset to the stack 
push constant 1
// inserting the array base pointer to the stack 
push local 1
// getting the pointer to the desired index in the array on the top of the stack
add
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push that 0
call Output.printInt 1
// ignoring the output of the function
pop temp 0
// do statement
call Output.println 0
// ignoring the output of the function
pop temp 0
// inserting the return value to the stack
push constant 0
return
function Main.double 0
// inserting the return value to the stack
push argument 0
push constant 2
call Math.multiply 2
return
function Main.fill 0
//condition
label Main_check_label1
push argument 1
push constant 0
gt
if-goto Main_true_label1
goto Main_false_label1
label Main_true_label1
// while statments
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push argument 1
push constant 1
sub
pop argument 1
// "let" expression of setting a value into a certain offset in an array 
// inserting the array offset to the stack 
push argument 1
// inserting the array base pointer to the stack 
push argument 0
// getting the pointer to the desired index in the array on the top of the stack
add
// inserting the expression that is about to be insert to the desired index in the array, into the stack
push constant 3
call Array.new 1
pop temp 0
// using the "THAT" pointer to access the desired index in the array
pop pointer 1
push temp 0
pop that 0
goto Main_check_label1
label Main_false_label1
// inserting the return value to the stack
push constant 0
return
